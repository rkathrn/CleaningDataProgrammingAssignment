install.packages("KernSmooth")
library(KernSmooth)
add2 <- function(x, y) {
x + y
}
add2(3, 5)
above <- function(x, n) {
use <- x > n
x[use]
}
above(x, 10)
x <- 1:20
above(x, 12)
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
library(datasets)
data("iris")
?iris
head(iris)
q1 <- split(iris, iris$Species)
q1
colMeans(q1$virginica)
q1$virginica
unsplit(q1)
?gl
q1_1 <- q1[q1$virginica]
class(q1)
q1
f <- gl(3, 50)
split(iris, f)
q1_1 <- split(iris, f)
q1_1$`3`
colMeans(q1_1$`3`)
q1_2 <- q1_1$3
class(q1_1)
q1_2 <- q1_1[q1_1$`3`]
q1_2 <- q1_1[[3]]
colMeans(q1_2)
class(q1_2)
mean(q1_2[,1])
colMeans(iris)
apply(iris[,1:4], 1, mean)
apply(iris[,1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
?average
tapply(mtcars$hp, mtcars$cyl, mean)
209-83
debug(ls)
ls()
library(datasets)
data(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
selet(cran, ip_id, package, country)
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time
)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version =="3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os =="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is_na(cran$r_version) == TRUE)
filter(cran, !is_na(r_version) == TRUE)
filter(cran, !is.na(cran$r_version) == TRUE)
filter(cran, !is.na(r_version) == TRUE)
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), desc(ip_id))
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
q
q()
install.packages("RMySQL")
source("http://bioconductor/biocLite.R")
source("http://bioconductor.org/biocLite.R")
?BiocUpgrade
source("https://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
help("Deprecated")
install.packages("BiocManager")
biocLite("rhdf5")
library(rhdf5)
library(httr)
install.packages(httpuv)
install.packages("httpuv")
oauth_endpoints("github")
myapp <- oauth_app("github", key ="2851238506af31bcc50c
", secret="92ead477b5a737d1a189a6a26e080163b4ba8fb2
")
github_token <- oauth1.0_token(oauth_endpoints("github"), myapp)
?handle_url
myapp <- oauth_app("github", key ="2851238506af31bcc50c
", secret="92ead477b5a737d1a189a6a26e080163b4ba8fb2
", redirect url="http://localhost:1410")
myapp <- oauth_app("github", key ="2851238506af31bcc50c
", secret="92ead477b5a737d1a189a6a26e080163b4ba8fb2
", redirect_url="http://localhost:1410")
library(httpuv)
myapp <- oauth_app("github", key ="2851238506af31bcc50c
", secret="92ead477b5a737d1a189a6a26e080163b4ba8fb2
")
github_token <- oauth1.0_token(oauth_endpoints("github"), myapp)
?oauth1.0_token
github_token <- oauth1.0_token("https://github.com/login/oauth/authorize", myapp)
github_token <- oauth1.0_token("https://github.com/login/oauth/access_token", myapp)
?oauth1.0_token
endpoints <- oauth_endpoints("github")
github_token <- oauth1.0_token(oauth_endpoints, myapp)
github_token <- oauth1.0_token(oauth_endpoints, myapp, cache=FALSE)
install.packages
install.packages("tidyr")
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(.cran, package)
by_package <- group_by(cran, package)
by_package
?summarize
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
?filter
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
?mutate()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, key="sex_class", value="count")
res <- gather(students2, sex_class, count, -grade)
res
?separate()
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
library(readr)
parse_number("class5")
submit()
submit()
students4
submit()
submit()
?unique
submit()
submit()
passed
failed
?mutate
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
?separate
submit()
submit()
submit()
q()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "acs.csv", method="curl")
acs <- read.csv("acs.csv")
library(swirl)
ls()
rm(list=ls())
swirl()
sys.getlocale("LC_TIME")
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 16, minutes = 34, seconds = 55)
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?interval
how_long <- last_time %--% arrive
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
q()
rm(endpoints)
rm(myapp)
setwd("~/Desktop/CleaningDataProgrammingAssignment")
source("run_analysis.R")
source("run_analysis.R")
?tempfile
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", "UCI HAR Dataset")
list.files()
list.dirs()
?unz()
unz(unzip, "UCI HAR Dataset")
unz("UCI HAR Dataset")
unz(description, "UCI HAR Dataset")
unzip("UCI HAR Dataset")
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip",temp)
data <- read.table(unz(temp, "UCI HAR Dataset"))
unlink(temp)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip",temp)
unlink(temp)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", "UCI HAR Dataset.zip")
unzip("UCI HAR Dataset.zip")
source("run_analysis.R")
source("run_analysis.R")
source("run_analysis.R")
close(temp)
